{"version":3,"sources":["../src/code/main.ts","../src/code/modules/win-man.ts","../src/code/modules/electron.ts"],"sourcesContent":["/**\r\n * @name                                    main.ts\r\n * @description                             the main file (entry point)\r\n * @author                                  Maysara Elshewehy\r\n * @repo                                    https://github.com/Maysara-Elshewehy/mecs-npm-package\r\n *\r\n * @note                                    This script follows the `MECS` code style\r\n*/\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── PACK ───────────────────────────────────────┐  */\r\n\r\n    export *                                from './modules/electron';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */","/**\r\n * @name                                    win-man.ts\r\n * @description                             WinMan module\r\n*/\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── PACK ───────────────────────────────────────┐  */\r\n\r\n    import { app, BrowserWindow }           from 'electron';\r\n    import fs                              from 'fs';\r\n    import path                            from 'path';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── TYPE ───────────────────────────────────────┐  */\r\n\r\n    import { i_winman, i_window, i_win_cnf, i_appEvents as i_win_evt }\r\n    from './types';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── DATA ───────────────────────────────────────┐  */\r\n\r\n    declare const global : any;\r\n\r\n    let data : i_winman;\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── CORE ───────────────────────────────────────┐  */\r\n\r\n    export const WinMan\r\n    =\r\n    {\r\n        setup  : async (defaultWindow : string) =>\r\n        {\r\n            try\r\n            {\r\n                // [0] Assign data\r\n                {\r\n                    data =\r\n                    {\r\n                        defaultWindow   : defaultWindow,\r\n                        windows         : Helpers.initWindows(Helpers.fetchWindows()),\r\n                    }\r\n                }\r\n\r\n                // [1] Create default window\r\n                WinMan.create(data.defaultWindow);\r\n            }\r\n\r\n            catch(try_err)\r\n            {\r\n                global.log.error(`Failed to setup windows : ${try_err}`);\r\n\r\n                throw try_err;\r\n            }\r\n        },\r\n\r\n        create  : async (winName : string, callback ?:  (winName : string) => void) =>\r\n        {\r\n            try\r\n            {\r\n                // [0] Get window\r\n                const win = Helpers.getWindowByName(winName);\r\n\r\n                // [1] Create window\r\n                const window = new BrowserWindow(win.config.electronOptions);\r\n\r\n                // [2] Save window\r\n                win._window = window;\r\n\r\n                // [3] Load HTML\r\n                win._window.loadFile(path.join(__dirname, '../src/code/static/index.html'));\r\n\r\n                // [z] Extra Options\r\n                {\r\n                    // - Hide menu bar (if not configured || false\r\n                    if(!win.config.options.menu)\r\n                        win._window.setMenuBarVisibility(false);\r\n                }\r\n\r\n                // [x] Events\r\n                {\r\n                    if(win?.events?.onClose) win._window.on('closed', win.events.onClose);\r\n\r\n                    win._window.on('ready-to-show', () =>\r\n                    {\r\n                        // - Callback\r\n                        if(callback) callback(winName);\r\n\r\n                        // - Show\r\n                        win._window?.show();\r\n\r\n                        // - onReady\r\n                        if(win.events?.onReady) win.events.onReady();\r\n                    });\r\n                }\r\n            }\r\n\r\n            catch(try_err)\r\n            {\r\n                global.log.error(`Failed to create window : ${try_err}`);\r\n\r\n                throw try_err;\r\n            }\r\n        },\r\n\r\n        close   : async (winName : string, callback ?: (winName : string) => void) =>\r\n        {\r\n            try\r\n            {\r\n                // [0] Get window\r\n                const win = Helpers.getWindowByName(winName);\r\n\r\n                // [1] Close window\r\n                win._window?.close();\r\n                win._window = undefined;\r\n            }\r\n\r\n            catch(try_err)\r\n            {\r\n                global.log.error(`Failed to close window : ${try_err}`);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns { name: string, path: string }  - The focused window || default window\r\n        */\r\n        get     : () : any =>\r\n        {\r\n            for(let i = 0; i < data.windows.length; i++)\r\n                if(data.windows[i]._window?.isFocused())\r\n                    return { name: data.windows[i].name, path: data.windows[i].path, components: data.windows[i].config.components };\r\n\r\n            // return to default\r\n            return WinMan.getDefault();\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns { name: string, path: string }  - The default window\r\n        */\r\n        getDefault : () : any =>\r\n        {\r\n            let win = Helpers.getWindowByName(data.defaultWindow);\r\n\r\n            return { name: win.name, path: win.path, components: win.config.components };\r\n        }\r\n    }\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── HELP ───────────────────────────────────────┐  */\r\n\r\n    const defined = (obj : any) : boolean => typeof obj !== 'undefined';\r\n\r\n    const Helpers =\r\n    {\r\n        fetchWindows                        : () : i_window[] =>\r\n        {\r\n            // - to store fetched windows\r\n            let res : i_window[] = [];\r\n\r\n            // - get windows root path\r\n            const windowsRoot = path.join(global.mainDirectory, '/interface/windows/');\r\n\r\n            // - read windows directory\r\n            let windows = fs.readdirSync(windowsRoot);\r\n\r\n            // - loop through windows\r\n            for(let i = 0; i < windows.length; i++)\r\n            {\r\n                // - get window root path\r\n                const windowRoot = path.join(windowsRoot, windows[i]);\r\n\r\n                // - window config\r\n                const config : i_win_cnf = JSON.parse(fs.readFileSync(path.join(windowRoot, '/config.json'), 'utf8'));\r\n\r\n                // - window events\r\n                const events : i_win_evt = require(path.join(windowRoot, '/events.js'));\r\n\r\n                // - save fetched window\r\n                res.push\r\n                ({\r\n                    name    : config.name,\r\n                    path    : windowRoot,\r\n                    config  : config,\r\n                    events  : events,\r\n                });\r\n            }\r\n\r\n            return res;\r\n        },\r\n\r\n        initWindows                         : (windows : i_window[]) =>\r\n        {\r\n            // - loop through windows\r\n            for(let i = 0; i < windows.length; i++)\r\n            {\r\n                let electronOptions : any = {};\r\n\r\n                // - size\r\n                {\r\n                    // - width\r\n                    {\r\n                        if(defined(windows[i].config.options.width))\r\n                            electronOptions.width           = windows[i].config.options.width;\r\n\r\n                        if(defined(windows[i].config.options.maxWidth))\r\n                            electronOptions.maxWidth        = windows[i].config.options.maxWidth;\r\n\r\n                        if(defined(windows[i].config.options.minWidth))\r\n                            electronOptions.minWidth        = windows[i].config.options.minWidth;\r\n                    }\r\n\r\n                    // - height\r\n                    {\r\n                        if(defined(windows[i].config.options.height))\r\n                            electronOptions.height          = windows[i].config.options.height;\r\n\r\n                        if(defined(windows[i].config.options.maxHeight))\r\n                            electronOptions.maxHeight       = windows[i].config.options.maxHeight;\r\n\r\n                        if(defined(windows[i].config.options.minHeight))\r\n                            electronOptions.minHeight       = windows[i].config.options.minHeight;\r\n                    }\r\n                }\r\n\r\n                // - window\r\n                {\r\n                    if(defined(windows[i].config.options.frame))\r\n                        electronOptions.frame               = windows[i].config.options.frame;\r\n\r\n                    if(defined(windows[i].config.options.show))\r\n                        electronOptions.show                = windows[i].config.options.show;\r\n\r\n                    if(defined(windows[i].config.options.transparent))\r\n                        electronOptions.transparent         = windows[i].config.options.transparent;\r\n                }\r\n\r\n                // - web preferences\r\n                {\r\n                    electronOptions.webPreferences = {};\r\n\r\n                    // - preload\r\n                    if(defined(windows[i].config.options.webPreferences.preload) && windows[i].config.options.webPreferences.preload)\r\n                        electronOptions.webPreferences.preload = path.join(__dirname, '../src/code/modules/preload.js');\r\n                    // electronOptions.webPreferences.preload = path.join(__dirname, './preload.js');\r\n\r\n                    // - node integration\r\n                    if(defined(windows[i].config.options.webPreferences.nodeIntegration))\r\n                        electronOptions.webPreferences.nodeIntegration = windows[i].config.options.webPreferences.nodeIntegration;\r\n                }\r\n\r\n                windows[i].config.electronOptions = electronOptions;\r\n            }\r\n\r\n            return windows;\r\n        },\r\n\r\n        getWindowByName                    : (name : string) =>\r\n        {\r\n            const win = data.windows.find((window : i_window) => window.name === name);\r\n\r\n            if(!win)\r\n            throw new Error(`Window not found : ${name}`);\r\n\r\n            return win;\r\n        },\r\n    };\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n","/**\r\n * @name                                    electron.ts\r\n * @description                             electron module\r\n*/\r\n\r\n\r\n/* ┌─────────────────────────────────────── PACK ───────────────────────────────────────┐  */\r\n\r\n    import { WinMan }                       from './win-man';\r\n    import { logger }                       from '@je-es/log';\r\n    import { app, BrowserWindow, ipcMain }  from 'electron';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── TYPE ───────────────────────────────────────┐  */\r\n\r\n    import { i_electron, i_ipcEvents }      from './types';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── DATA ───────────────────────────────────────┐  */\r\n\r\n    declare const global : any;\r\n\r\n    let data : i_electron;\r\n\r\n    const static_ipcEvents : i_ipcEvents =\r\n    {\r\n        'window'        :\r\n        {\r\n            'get'           : (args : any) => WinMan.get(),\r\n            'create'        : (winName : string) => WinMan.create(winName),\r\n            'close'         : (winName : string) => WinMan.close(winName),\r\n        },\r\n\r\n        'component'     :\r\n        {\r\n            '__load'        : (cmpName : string) => WinMan.create(cmpName),\r\n            // 'build'         : (cmpName : string) => CmpMan.build(cmpName),\r\n            // 'valueOf'       : (cmpName : string) => CmpMan.valueOf(cmpName),\r\n        },\r\n\r\n        'temp'          :\r\n        {\r\n            'prolog-options' : () : string =>\r\n            {\r\n                if(data.meta?.logsDirectory) return data.meta?.logsDirectory;\r\n                if(data.meta?.mainDirectory) return data.meta?.mainDirectory;\r\n                return process.cwd();\r\n            },\r\n\r\n            'mainDirectory' : () => global.mainDirectory,\r\n        }\r\n    };\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── CORE ───────────────────────────────────────┐  */\r\n\r\n    /**\r\n     * Initializes the Electron application with the provided Electron options.\r\n     *\r\n     * @param {i_electron}  options         - The options for the Electron application. Defaults to an empty object.\r\n     *\r\n     * @return {Promise<void>}              - A promise that resolves when the Electron application is successfully initialized.\r\n    */\r\n    export const electron\r\n    = async (options : i_electron = {})\r\n    : Promise<void> =>\r\n    {\r\n        try\r\n        {\r\n            // [0] Requirments\r\n            {\r\n                if(!global.log)\r\n                {\r\n                    const root = options.meta?.mainDirectory || process.cwd();\r\n                    global.log = new logger({ root, save: true });\r\n                }\r\n            }\r\n\r\n            // [1] Assign data\r\n            {\r\n                data = options;\r\n\r\n                // - add ipc events\r\n                if(data.events)\r\n                {\r\n                    if(!data.events.ipc) data.events.ipc = static_ipcEvents;\r\n                    else\r\n                    {\r\n                        for(const group in static_ipcEvents)\r\n                        {\r\n                            if(!data.events.ipc[group]) data.events.ipc[group] = static_ipcEvents[group];\r\n                            else\r\n                            {\r\n                                for(const event in static_ipcEvents[group])\r\n                                    if(!data.events.ipc[group][event]) data.events.ipc[group][event] = static_ipcEvents[group][event];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // - global window api\r\n                    global.win = data.events.ipc.window;\r\n                }\r\n\r\n                // - set global __dirname\r\n                global.mainDirectory = options.meta?.mainDirectory || process.cwd();\r\n            }\r\n\r\n            // [2] Bind events\r\n            {\r\n                app.on('window-all-closed', Helpers.onWindowAllClosed);\r\n                app.on('ready', Helpers.onReady);\r\n            }\r\n        }\r\n\r\n        catch(error)\r\n        {\r\n            console.error(`Failed to start electron : ${error}`);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── HELP ───────────────────────────────────────┐  */\r\n\r\n    const Helpers =\r\n    {\r\n        onWindowAllClosed                   : async () =>\r\n        {\r\n            // [0] Use close callback\r\n            if(data.events && data.events.app && data.events.app.onClose)\r\n            await data.events.app.onClose(); // - keep await\r\n\r\n            // [1] Close application\r\n            if (process.platform !== 'darwin')\r\n            {\r\n                // - on OS X it is common for applications and their menu bar\r\n                // - to stay active until the user quits explicitly with Cmd + Q\r\n                app.quit();\r\n            }\r\n        },\r\n\r\n        onReady                              : async () =>\r\n        {\r\n            // [0] Events\r\n            ipcMain.handle('events', async (event, options : { group : string, event : string, args: any }) =>\r\n            {\r\n                // ! check if data.events.ipc\r\n                if(!data.events || !data.events.ipc)\r\n                    throw new Error(`data.events.ipc not found`);\r\n\r\n                // ! check if the IPC has a group\r\n                if(!data.events.ipc[options.group])\r\n                    throw new Error(`data.events.ipc.group not found : ${options.group}`);\r\n\r\n                // ! check if the IPC has an event\r\n                if(!data.events.ipc[options.group][options.event])\r\n                    throw new Error(`data.events.ipc.group.event not found : ${options.group}.${options.event}`);\r\n\r\n                // - call the event\r\n                const res = await data.events.ipc[options.group][options.event](options.args);\r\n\r\n                // - return the result\r\n                return res;\r\n            });\r\n\r\n            // [1] Use ready callback\r\n            if(data.events && data.events.app && data.events.app.onReady)\r\n            await data.events.app.onReady(); // - keep await\r\n\r\n            // [2] Create default window\r\n            if (BrowserWindow.getAllWindows().length === 0)\r\n            await WinMan.setup(data.meta?.defaultWindow || 'splash');\r\n        },\r\n    };\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n"],"mappings":"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","names":["path","_a","fs","import_electron","data","Helpers"]}